package com.metricstream.jdbc

import java.sql.SQLException
import java.util.concurrent.atomic.AtomicLong

class MockCallResult(
    tag: String,
    private val data: Array<Any?>,
    private val autoGenerated: Boolean = false,
    usages: Int = 1
): CallResult {
    private val tag: String
    private var wasNull = false
    private var closed: Boolean = false

    override fun toString(): String = tag

    override fun close() {
        closed = true
    }

    override fun wasNull(): Boolean = wasNull

    override fun isClosed(): Boolean {
        return closed
    }

    private fun outOfRange(columnIndex: Int) = autoGenerated || columnIndex > data.size

    override fun getInt(columnNumber: Int) = when {
        outOfRange(columnNumber) -> THE_ANSWER_TO_THE_ULTIMATE_QUESTION
        else -> when (val value = data[columnNumber - 1]) {
            is Int? -> value
            is String -> value.toInt()
            else -> throw SQLException()
        }
    }.also {
        MockSQLBuilderProvider.invocations.getRsInt++
        wasNull = it == null
    } ?: 0

    override fun getLong(columnNumber: Int) = when {
        outOfRange(columnNumber) -> THE_ANSWER_TO_THE_ULTIMATE_QUESTION.toLong()
        else -> when (val value = data[columnNumber - 1]) {
            is Long? -> value
            is Int -> value.toLong()
            is String -> value.toLong()
            else -> throw SQLException()
        }
    }.also {
        MockSQLBuilderProvider.invocations.getRsInt++
        wasNull = it == null
    } ?: 0L

    override fun getString(columnNumber: Int) = when {
        outOfRange(columnNumber) -> MockResultSet.THE_ANSWER_TO_THE_ULTIMATE_QUESTION.toString()
        else -> data[columnNumber - 1] as String?
    }.also {
        MockSQLBuilderProvider.invocations.getRsString++
        wasNull = it == null
    }

    init {
        this.tag = tag.ifEmpty { "$tagPrefix${counter.incrementAndGet()}" }
    }


    companion object {
        private val counter = AtomicLong(0)
        private const val THE_ANSWER_TO_THE_ULTIMATE_QUESTION = 42
        internal const val tagPrefix = "MockCallResult#"

        @JvmStatic
        fun add(tag: String, data: Array<Any?>) {
            MockSQLBuilderProvider.addCallResult(MockCallResult(tag, data))
        }
    }
}
